// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gostuding/GophKeeper/internal/server (interfaces: Storager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// AddFile mocks base method.
func (m *MockStorager) AddFile(arg0 context.Context, arg1 uint, arg2 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFile", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFile indicates an expected call of AddFile.
func (mr *MockStoragerMockRecorder) AddFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockStorager)(nil).AddFile), arg0, arg1, arg2)
}

// AddFileData mocks base method.
func (m *MockStorager) AddFileData(arg0 context.Context, arg1, arg2 uint, arg3, arg4, arg5 int, arg6 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFileData", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFileData indicates an expected call of AddFileData.
func (mr *MockStoragerMockRecorder) AddFileData(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileData", reflect.TypeOf((*MockStorager)(nil).AddFileData), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// AddFileFinish mocks base method.
func (m *MockStorager) AddFileFinish(arg0 context.Context, arg1 uint, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFileFinish", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFileFinish indicates an expected call of AddFileFinish.
func (mr *MockStoragerMockRecorder) AddFileFinish(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileFinish", reflect.TypeOf((*MockStorager)(nil).AddFileFinish), arg0, arg1, arg2)
}

// AddTextValue mocks base method.
func (m *MockStorager) AddTextValue(arg0 context.Context, arg1 interface{}, arg2 uint, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTextValue", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTextValue indicates an expected call of AddTextValue.
func (mr *MockStoragerMockRecorder) AddTextValue(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTextValue", reflect.TypeOf((*MockStorager)(nil).AddTextValue), arg0, arg1, arg2, arg3, arg4)
}

// Close mocks base method.
func (m *MockStorager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoragerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorager)(nil).Close))
}

// DeleteValue mocks base method.
func (m *MockStorager) DeleteValue(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteValue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteValue indicates an expected call of DeleteValue.
func (mr *MockStoragerMockRecorder) DeleteValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValue", reflect.TypeOf((*MockStorager)(nil).DeleteValue), arg0, arg1)
}

// GetFileData mocks base method.
func (m *MockStorager) GetFileData(arg0, arg1, arg2 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileData", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileData indicates an expected call of GetFileData.
func (mr *MockStoragerMockRecorder) GetFileData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileData", reflect.TypeOf((*MockStorager)(nil).GetFileData), arg0, arg1, arg2)
}

// GetKey mocks base method.
func (m *MockStorager) GetKey(arg0 context.Context, arg1 uint, arg2 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockStoragerMockRecorder) GetKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockStorager)(nil).GetKey), arg0, arg1, arg2)
}

// GetPreloadFileInfo mocks base method.
func (m *MockStorager) GetPreloadFileInfo(arg0 context.Context, arg1 uint, arg2 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreloadFileInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreloadFileInfo indicates an expected call of GetPreloadFileInfo.
func (mr *MockStoragerMockRecorder) GetPreloadFileInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreloadFileInfo", reflect.TypeOf((*MockStorager)(nil).GetPreloadFileInfo), arg0, arg1, arg2)
}

// GetTextValues mocks base method.
func (m *MockStorager) GetTextValues(arg0 context.Context, arg1 string, arg2 uint) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextValues", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextValues indicates an expected call of GetTextValues.
func (mr *MockStoragerMockRecorder) GetTextValues(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextValues", reflect.TypeOf((*MockStorager)(nil).GetTextValues), arg0, arg1, arg2)
}

// GetValue mocks base method.
func (m *MockStorager) GetValue(arg0 context.Context, arg1 string, arg2, arg3 uint) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockStoragerMockRecorder) GetValue(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockStorager)(nil).GetValue), arg0, arg1, arg2, arg3)
}

// IsUniqueViolation mocks base method.
func (m *MockStorager) IsUniqueViolation(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUniqueViolation", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUniqueViolation indicates an expected call of IsUniqueViolation.
func (mr *MockStoragerMockRecorder) IsUniqueViolation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUniqueViolation", reflect.TypeOf((*MockStorager)(nil).IsUniqueViolation), arg0)
}

// Login mocks base method.
func (m *MockStorager) Login(arg0 context.Context, arg1, arg2 string) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockStoragerMockRecorder) Login(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockStorager)(nil).Login), arg0, arg1, arg2)
}

// Registration mocks base method.
func (m *MockStorager) Registration(arg0 context.Context, arg1, arg2 string) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Registration indicates an expected call of Registration.
func (mr *MockStoragerMockRecorder) Registration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockStorager)(nil).Registration), arg0, arg1, arg2)
}

// SetKey mocks base method.
func (m *MockStorager) SetKey(arg0 context.Context, arg1 uint, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKey indicates an expected call of SetKey.
func (mr *MockStoragerMockRecorder) SetKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKey", reflect.TypeOf((*MockStorager)(nil).SetKey), arg0, arg1, arg2)
}

// UpdateTextValue mocks base method.
func (m *MockStorager) UpdateTextValue(arg0 context.Context, arg1 interface{}, arg2, arg3 uint, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTextValue", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTextValue indicates an expected call of UpdateTextValue.
func (mr *MockStoragerMockRecorder) UpdateTextValue(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTextValue", reflect.TypeOf((*MockStorager)(nil).UpdateTextValue), arg0, arg1, arg2, arg3, arg4, arg5)
}
