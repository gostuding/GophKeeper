// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gostuding/GophKeeper/internal/server (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddFile mocks base method.
func (m *MockStorage) AddFile(arg0 context.Context, arg1 uint, arg2 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFile", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFile indicates an expected call of AddFile.
func (mr *MockStorageMockRecorder) AddFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockStorage)(nil).AddFile), arg0, arg1, arg2)
}

// AddFileData mocks base method.
func (m *MockStorage) AddFileData(arg0 context.Context, arg1, arg2 uint, arg3, arg4, arg5 int, arg6 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFileData", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFileData indicates an expected call of AddFileData.
func (mr *MockStorageMockRecorder) AddFileData(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileData", reflect.TypeOf((*MockStorage)(nil).AddFileData), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// AddFileFinish mocks base method.
func (m *MockStorage) AddFileFinish(arg0 context.Context, arg1 uint, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFileFinish", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFileFinish indicates an expected call of AddFileFinish.
func (mr *MockStorageMockRecorder) AddFileFinish(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileFinish", reflect.TypeOf((*MockStorage)(nil).AddFileFinish), arg0, arg1, arg2)
}

// AddTextValue mocks base method.
func (m *MockStorage) AddTextValue(arg0 context.Context, arg1 interface{}, arg2 uint, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTextValue", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTextValue indicates an expected call of AddTextValue.
func (mr *MockStorageMockRecorder) AddTextValue(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTextValue", reflect.TypeOf((*MockStorage)(nil).AddTextValue), arg0, arg1, arg2, arg3, arg4)
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// DeleteValue mocks base method.
func (m *MockStorage) DeleteValue(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteValue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteValue indicates an expected call of DeleteValue.
func (mr *MockStorageMockRecorder) DeleteValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValue", reflect.TypeOf((*MockStorage)(nil).DeleteValue), arg0, arg1)
}

// GetFileData mocks base method.
func (m *MockStorage) GetFileData(arg0, arg1, arg2 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileData", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileData indicates an expected call of GetFileData.
func (mr *MockStorageMockRecorder) GetFileData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileData", reflect.TypeOf((*MockStorage)(nil).GetFileData), arg0, arg1, arg2)
}

// GetKey mocks base method.
func (m *MockStorage) GetKey(arg0 context.Context, arg1 uint) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockStorageMockRecorder) GetKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockStorage)(nil).GetKey), arg0, arg1)
}

// GetPreloadFileInfo mocks base method.
func (m *MockStorage) GetPreloadFileInfo(arg0 context.Context, arg1 uint, arg2 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreloadFileInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreloadFileInfo indicates an expected call of GetPreloadFileInfo.
func (mr *MockStorageMockRecorder) GetPreloadFileInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreloadFileInfo", reflect.TypeOf((*MockStorage)(nil).GetPreloadFileInfo), arg0, arg1, arg2)
}

// GetTextValues mocks base method.
func (m *MockStorage) GetTextValues(arg0 context.Context, arg1 interface{}, arg2 uint) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextValues", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextValues indicates an expected call of GetTextValues.
func (mr *MockStorageMockRecorder) GetTextValues(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextValues", reflect.TypeOf((*MockStorage)(nil).GetTextValues), arg0, arg1, arg2)
}

// GetValue mocks base method.
func (m *MockStorage) GetValue(arg0 context.Context, arg1 interface{}, arg2, arg3 uint) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockStorageMockRecorder) GetValue(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockStorage)(nil).GetValue), arg0, arg1, arg2, arg3)
}

// IsUniqueViolation mocks base method.
func (m *MockStorage) IsUniqueViolation(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUniqueViolation", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUniqueViolation indicates an expected call of IsUniqueViolation.
func (mr *MockStorageMockRecorder) IsUniqueViolation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUniqueViolation", reflect.TypeOf((*MockStorage)(nil).IsUniqueViolation), arg0)
}

// Login mocks base method.
func (m *MockStorage) Login(arg0 context.Context, arg1, arg2 string) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockStorageMockRecorder) Login(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockStorage)(nil).Login), arg0, arg1, arg2)
}

// Registration mocks base method.
func (m *MockStorage) Registration(arg0 context.Context, arg1, arg2 string) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Registration indicates an expected call of Registration.
func (mr *MockStorageMockRecorder) Registration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockStorage)(nil).Registration), arg0, arg1, arg2)
}

// UpdateTextValue mocks base method.
func (m *MockStorage) UpdateTextValue(arg0 context.Context, arg1 interface{}, arg2, arg3 uint, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTextValue", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTextValue indicates an expected call of UpdateTextValue.
func (mr *MockStorageMockRecorder) UpdateTextValue(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTextValue", reflect.TypeOf((*MockStorage)(nil).UpdateTextValue), arg0, arg1, arg2, arg3, arg4, arg5)
}
